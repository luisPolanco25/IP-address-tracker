{"version":3,"sources":["assets/icon-arrow.svg","assets/icon-location.svg","components/context/IpAddressContext.js","helpers/location-api.js","components/input/Input.js","components/map/Map.js","components/textbox/Textbox.js","IpAddressTrackerApp.js","index.js"],"names":["module","exports","IpAddressContext","createContext","locationApi","ipAddress","a","url","process","fetch","data","json","dataInfo","ip","isp","location","region","city","timezone","postalCode","lat","lng","Input","useContext","geoLocation","setGeoLocation","useState","setIpAddress","id","onSubmit","e","preventDefault","then","type","autoComplete","placeholder","name","value","onChange","target","src","arrow","alt","LocationMarker","size","latLng","map","useMap","setView","getZoom","Marker","position","icon","L","iconUrl","require","iconSize","Map","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","Textbox","style","color","IpAddressTrackerApp","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f9e193a8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon-arrow.53ef8ed8.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-location.ff171469.svg\";","import { createContext } from 'react';\r\n\r\nexport const IpAddressContext = createContext();","\r\n\r\nexport const locationApi = async(ipAddress) => {\r\n\r\n    const url = `https://geo.ipify.org/api/v2/country,city?apiKey=${process.env.REACT_APP_GEOLOCATION_API_KEY}&ipAddress=${ipAddress}`;\r\n\r\n    const data = await fetch(url);\r\n\r\n    const dataInfo = await data.json();\r\n\r\n    const {ip, isp, location} = dataInfo;\r\n\r\n    if (location) {\r\n        const {region, city, timezone, postalCode, lat, lng} = location;\r\n        return {ip, region, city, timezone, postalCode, isp, lat, lng};\r\n    } else {\r\n        return 'This is not a valid IP Address';\r\n    }\r\n\r\n}","import React, { useContext, useState } from 'react'\r\nimport { locationApi } from '../../helpers/location-api'\r\nimport { IpAddressContext } from '../context/IpAddressContext';\r\nimport arrow from '../../assets/icon-arrow.svg';\r\n\r\nexport const Input = () => {\r\n\r\n    const {geoLocation, setGeoLocation} = useContext( IpAddressContext );\r\n    const {ip} = geoLocation;\r\n    \r\n    const [ipAddress, setIpAddress] = useState( ip );\r\n\r\n    const handleInputChange = ({target}) => {\r\n        setIpAddress(target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n\r\n        e.preventDefault();\r\n        return locationApi(ipAddress).then(data => {\r\n            setGeoLocation(data);\r\n        });\r\n\r\n    }\r\n\r\n    return (\r\n        <div id=\"background\">\r\n            <h1>IP Address Tracker</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                <input \r\n                    type=\"text\" \r\n                    autoComplete=\"off\"\r\n                    placeholder=\"Search for any IP address or domain\"\r\n                    name=\"ipAddress\"\r\n                    value={ipAddress}\r\n                    onChange={handleInputChange}\r\n                />\r\n\r\n                <button type=\"submit\">\r\n                    <img src={arrow} alt=\"\" />\r\n                </button>\r\n\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport L from 'leaflet';\r\nimport { MapContainer, TileLayer, Marker, useMap } from 'react-leaflet';\r\n\r\n\r\nconst getIcon = (size) => {\r\n    return L.icon(\r\n        {\r\n            iconUrl: require('../../assets/icon-location.svg'),\r\n            iconSize: [size]\r\n        }\r\n    )\r\n}\r\n\r\nconst LocationMarker = ({latLng}) => {\r\n    const map = useMap();\r\n    map.setView(latLng, map.getZoom())\r\n\r\n  \r\n    return latLng === null ? null : (\r\n      <Marker \r\n        position={latLng}\r\n        icon={getIcon(46)}\r\n      >\r\n      </Marker>\r\n    )\r\n  }\r\n  \r\n\r\nexport const Map = ({lat = 43.73414415941826, lng = 7.416179362673161}) => {\r\n\r\n    const position = [lat, lng]\r\n\r\n\r\n    return (\r\n        <MapContainer center={position} zoom={100} scrollWheelZoom={false}>\r\n            <TileLayer\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n            <LocationMarker latLng={position} />\r\n        </MapContainer>\r\n    \r\n    )\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { IpAddressContext } from '../context/IpAddressContext';\r\n\r\nexport const Textbox = () => {\r\n\r\n    const {geoLocation} = useContext(IpAddressContext);\r\n    \r\n    const {ip, region, city, postalCode, timezone, isp} = geoLocation;\r\n\r\n\r\n    return (\r\n\r\n        (geoLocation === 'This is not a valid IP Address')\r\n        \r\n        ?\r\n\r\n        (\r\n            <div id=\"text-box\">\r\n                <h2>Error</h2>\r\n                <p style={{color: 'red'}}>This is not a valid IP Address</p>\r\n            </div>\r\n        )\r\n\r\n        :\r\n\r\n        (\r\n            <div id=\"text-box\">\r\n\r\n                <div>\r\n                    <h2>Ip Address</h2>\r\n                    <p>{ip}</p>\r\n                </div>\r\n\r\n                <div>\r\n                    <h2>Location</h2>\r\n                    <p>{`${region}, ${city} ${postalCode}`}</p>\r\n                </div>\r\n\r\n                <div>\r\n                    <h2>Timezone</h2>\r\n                    <p>UTC {timezone}</p>\r\n                </div>\r\n\r\n                <div>\r\n                    <h2>ISP</h2>\r\n                    <p>{isp}</p>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport { IpAddressContext } from './components/context/IpAddressContext';\r\nimport { Input } from './components/input/Input';\r\nimport { Map } from './components/map/Map';\r\nimport { Textbox } from './components/textbox/Textbox';\r\nimport './styles.css';\r\n\r\nexport const IpAddressTrackerApp = () => {\r\n\r\n    const [geoLocation, setGeoLocation] = useState({\r\n        \r\n        ip: '192.212.174.101',\r\n        region: 'Brooklyn',\r\n        city: 'NY',\r\n        postalCode: '10001',\r\n        timezone: '-05:00',\r\n        isp: 'SpaceX Starlink',\r\n        lat: 43.73414415941826,\r\n        lng: 7.416179362673161\r\n\r\n    });\r\n    \r\n\r\n    return (\r\n        <IpAddressContext.Provider value={{geoLocation, setGeoLocation}}>\r\n            <Input />\r\n            <Textbox />\r\n            <Map lat={geoLocation.lat} lng={geoLocation.lng} />\r\n        </IpAddressContext.Provider>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { IpAddressTrackerApp } from './IpAddressTrackerApp';\n\n\nReactDOM.render(\n    <IpAddressTrackerApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}